import "./Storage.yulp"

/// @title Transaction witness
object "Witness" is "Storage" {
  code {
    enum WitnessType (
      // Regular signature
      Signature,
      // Contract call
      Caller,
      // Implicitly the block producer
      Producer,
      // Aggregate Signature determined in the Root Header
      AggregateSignature
    )

    mstruct Signature (
      // Witness type
      type: uint8,
      r: bytes32,
      s: bytes32,
      v: uint8
    )

    mstruct Caller (
      // Witness type
      type: uint8,
      // Authorizing caller address
      owner: address,
      // Ethereum block number witness was registered
      blockNumber: uint32
    )

    mstruct Producer (
      // Witness type
      type: uint8,
      // Transaction ID being witnessed
      hash: bytes32
    )

    // 25 bytes in size
    mstruct AggregateSignature (
      // Witness type
      type: uint8,
      // The witness identifier registered in state
      addressIndex: uint32,
      // The actual 20 byte ethereum address
      owner: address
    )

    /// @notice Get authorized transaction ID by owner and Ethereum block number.
    /// @return Transaction ID as bytes32
    // TODO can this be transactionID => owner?
    // TODO care for re-org attacks
    function witnessAt(owner, blockNumber) -> id {
      id := sload(mappingKey2(Storage.Witness, owner, blockNumber))
    }

    /// @notice Register a new Caller witness for a transaction ID.
    function commitWitness(id) {
      // Witness must not already be registered
      require(eq(witnessAt(caller(), number()), 0), error"already-witnessed")
      // Store the transaction hash keyed by the caller and block number
      sstore(mappingKey2(Storage.Witness, caller(), number()), id)
      // Build WitnessCommitted log and emit
      mstore(0, number())
      log3(0, 32, topic"event WitnessCommitted(
        address indexed owner,
        uint256 blockNumber,
        bytes32 indexed transactionId)",
        caller(),
        id)
    }

    /// @notice Get size of witness object.
    /// @return Size of witness object, in bytes as uint256
    function witnessSize(witness) -> size {
      switch Signature.type(witness)

      case WitnessType.Signature {
        size := Signature.size(witness)
      }

      case WitnessType.Caller {
        size := Caller.size(witness)
      }

      case WitnessType.Producer {
        size := Producer.size(witness)
      }

      case WitnessType.AggregateSignature {
        size := AggregateSignature.size(witness)
      }

      default { // avoid infinite loops
        size := 66
      }
    }

    /// @notice ecrecover helper function.
    function ecrecover(digestHash, witness) -> account {
      mstore(0, digestHash)
      mstore(32, Signature.v(witness))
      mstore(64, Signature.r(witness))
      mstore(96, Signature.s(witness))

      let result := call(3000, 1, 0, 0, 128, 128, 32) // 4 chunks, return at 128
      require(gt(result, 0), error"ecrecover")
      account := mload(128)
    }
  }
}
