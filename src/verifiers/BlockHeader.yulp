import "./Block.yulp"

/// @title BlockHeader verifier
object "BlockHeader" is "Block" {
  code {
    enum AssertFinalized (
      // Assert not finalized
      NotFinalized,
      // Assert finalized
      Finalized,
      // No finality assertion
      None
    )

    /// @notice Verifies a block and root header.
    /// @param blockHeader Position in memory of block header object.
    /// @param root Position in memory of root header object. If `0`, only verify the block header, not the root header.
    /// @param rootIndex Position in memory of root index.
    /// @param assertFinalized Enum flag. 0: Assert finalized. 1: Assert not finalized. 2: No assert.
    function verifyHeader(blockHeader, root, rootIndex, assertFinalized) {
      // Block must be known (already committed)
      require(eq(blockCommitment(BlockHeader.height(blockHeader)), BlockHeader.keccak256(blockHeader)),
          error"block-commitment")

      // Load finalization delay parameter from constructor
      Constructor.copy(0)
      let finalizationDelay := Constructor.finalizationDelay(0)

      // If asserting finalized, block must be finalizable
      if eq(assertFinalized, AssertFinalized.Finalized) {
        require(gte(
          number(),
          add(BlockHeader.blockNumber(blockHeader), finalizationDelay)
        ), error"not-finalized")
      }

      // If asserting not finalized, block must not be finalizable
      if eq(assertFinalized, AssertFinalized.NotFinalized) {
        require(lt(
          number(),
          add(BlockHeader.blockNumber(blockHeader), finalizationDelay)
        ), error"block-finalied")
      }

      // If root header is present, verify it
      if gt(root, 0) {
        // Check bounds on transaction root index
        require(lt(rootIndex, BlockHeader.roots.length(blockHeader)),
            error"root-index-underflow")

        // Hash of root header must match root header hash from proof
        require(eq(
            RootHeader.keccak256(root),
            BlockHeader.roots(blockHeader, rootIndex)),
            error"root-block")
      }
    }
  }
}
