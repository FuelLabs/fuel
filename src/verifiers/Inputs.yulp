import "./verifiers/TransactionProof.yulp"
import "./Deposit.yulp"

/// @title Input verifier
object "VerifyInputs" is "Deposit", "TransactionProof" {
  code {
    /// @notice Verify input proofs.
    /// @param transactionProof Position in memory of transaction proof.
    /// @param inputProofs Position in memory of input proofs.
    function verifyInputs(transactionProof, inputProofs) {
      // Verify transaction proof
      verifyTransactionProof(transactionProof, AssertFinalized.NotFinalized)

      // Get positions of leaf and input
      let leaf := TransactionProof.transaction.position(transactionProof)
      let pos := TransactionLeaf.inputs.position(leaf)
      let index := 0

      // Loop over inputs and verify each input proof
      for {} lt(pos, TransactionLeaf.inputs.offset(leaf)) {} {
        switch Input.type(pos)

        case InputType.Transfer {
          verifyTransactionProof(inputProofs, AssertFinalized.None)

          require(eq(outputMetadata(inputProofs), TransactionLeaf.metadata(leaf, index)),
            error"output-id")

          require(eq(TransactionProof.UTXO.keccak256(inputProofs),
            TransactionProof.data(transactionProof, index)), error"utxo-data")

          inputProofs := add(inputProofs, TransactionProof.size(inputProofs))
        }

        case InputType.Deposit {
          let metadata := selectMetadata(transactionProof, index)

          require(eq(Deposit.token(inputProofs), MetadataDeposit.token(metadata)),
            error"deposit-token")

          require(eq(Deposit.blockNumber(inputProofs), MetadataDeposit.blockNumber(metadata)),
            error"deposit-block-number")

          require(eq(Deposit.keccak256(inputProofs),
            TransactionProof.data(transactionProof, index)), error"deposit-data")

          inputProofs := add(inputProofs, Deposit.size(inputProofs))
        }

        case InputType.Root {
          verifyTransactionProof(inputProofs, AssertFinalized.None)

          require(eq(RootHeader.keccak256(TransactionProof.rootProducer.position(inputProofs)),
            TransactionProof.data(transactionProof, index)), error"root-data")

          inputProofs := add(inputProofs, TransactionProof.size(inputProofs))
        }

        case InputType.HTLC {
          verifyTransactionProof(inputProofs, AssertFinalized.None)

          require(eq(outputMetadata(inputProofs), TransactionLeaf.metadata(leaf, index)),
            error"output-id")

          require(eq(TransactionProof.UTXO.keccak256(inputProofs),
            TransactionProof.data(transactionProof, index)), error"utxo-data")

          inputProofs := add(inputProofs, TransactionProof.size(inputProofs))
        }

        index := add(index, 1)
        pos := add(pos, inputSize(pos))
      }
    }
  }
}
