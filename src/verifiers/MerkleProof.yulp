import "./Transaction.yulp"

/// @title Merkle proof verifier.
object "MerkleProof" is "Transaction" {
  code {
    // Maximum Merkle tree height.
    const MERKLE_TREE_HEIGHT_MAX := 256

    /// @notice Verify a Merkle proof.
    /// @param transactionProof Position in memory of transaction proof.
    /// @return Boolean flag: if the leaf is *not* the rightmost.
    function verifyMerkleProof(transactionProof) -> rightmost {
      // Memory position of number of nodes in Merkle proof.
      let treeHeight := TransactionProof.merkleProof.length(transactionProof)

      // Memory position of Merkle branch.
      let branchStartPosition := TransactionProof.merkleProof.position(transactionProof)
  
      // Memory position of transaction index (which indicates left or right sibling at each depth).
      let transactionIndex := TransactionProof.transactionIndex(transactionProof)

      // Check bound on Merkle tree height, this is currently unreachable (checks here for formal verification).
      require(
        lt(
          treeHeight,
          MERKLE_TREE_HEIGHT_MAX
        ),
        error"tree-height-overflow"
      )

      // Temporary computed hash pointer.
      let computedHash := computeTransactionLeafHash(transactionProof)

      // Does this merkle derivation ever touch the left leaf.
      let leftish := false

      // Iterate through Merkle proof depths.
      // https://crypto.stackexchange.com/questions/31871/what-is-the-canonical-way-of-creating-merkle-tree-branches.
      for { let depth := 0 } lt(depth, treeHeight) { depth := add(depth, 1) } {
        // Position of the sibling hash value
        let siblingHash := mload(
          add(
            branchStartPosition, 
            mul(
              depth,
              32
            )
          )
        )

        // Determine proof direction (intuitively: bit value at depth).
        switch eq(mod(transactionIndex, 2), 0)

        // Direction is left branch.
        case 1 {
            mstore(mul32(1), computedHash)
            mstore(mul32(2), siblingHash)

            // This proof touches left
            leftish := true
        }

        // Direction is right branch.
        case 0 {
            mstore(mul32(1), siblingHash)
            mstore(mul32(2), computedHash)
        }

        // Direction is invalid.
        default {
          revert(0, 0)
        }

        // Compute parent node hash value.
        computedHash := computeInnerNodeHash(mul32(1))

        // Shift transaction index right by 1 so that depth is always at lowest bit.
        transactionIndex := shr(1, transactionIndex)
      }

      // If no leftish branches, we know it's a rightmost leaf.
      rightmost := eq(leftish, false)

      // Computed Merkle tree root must match provided Merkle tree root.
      require(
        eq(
          computedHash,
          TransactionProof.merkleTreeRoot(transactionProof)
        ),
        error"invalid-merkle-root"
      )
    }
  }
}
