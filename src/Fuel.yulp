import "./Constructor.yulp"
import "./Utils.yulp"
import "./Storage.yulp"
import "./Calldata.yulp"
import "./Withdraw.yulp"
import "./Address.yulp"
import "./provers/InvalidSum.yulp"
import "./provers/InvalidTransaction.yulp"
import "./provers/DoubleSpend.yulp"
import "./provers/MalformedBlock.yulp"
import "./provers/InvalidInput.yulp"
import "./provers/InvalidWitness.yulp"

/// @title Fuel optimistic rollup top-level contract
object "Fuel" is "Constructor", "Tokens", "Address" {
  code {
    // Constants
    const NUM_TOKENS_INIT := 1
    const NUM_ADDRESSES_INIT := 1
    const GENESIS_ROOTS_LENGTH := 0

    // Copy constructor arguments to memory, verify construction
    Constructor.copy(0)
    Constructor.verify(0)
    let operator := Constructor.operator(0)
    let genesis := Constructor.genesis(0)

    // Index the ETH token ID and zero address
    indexToken(ETHER_TOKEN_ADDRESS, 0)
    indexAddress(ZERO_ADDRESS, 0, 0, 0, 0, 0)

    // Log genesis block
    mstore(0, operator, NUM_TOKENS_INIT, NUM_ADDRESSES_INIT, 128, GENESIS_ROOTS_LENGTH)
    log3(
      0,
      160,
      topic"event BlockCommitted(
        address producer,
        uint256 numTokens,
        uint256 numAddresses,
        bytes32 indexed previousBlockHash,
        uint256 indexed height,
        bytes32[] roots)",
      0,
      0
    )

    // Implicitly commit genesis block
    sstore(mappingKey(Storage.BlockCommitments, 0), genesis)

    // Add extra data for block producer
    let dataSize := add(datasize("Runtime"), Constructor.size)

    // Goto runtime
    datacopy(0, dataoffset("Runtime"), dataSize)
    return(0, dataSize)
  }

  /// @notice Public methods
  object "Runtime" is
    "Constructor",
    "Calldata",
    "DoubleSpend",
    "MalformedBlock",
    "InvalidTransaction",
    "InvalidInput",
    "InvalidWitness",
    "Withdraw",
    "Address",
    "InvalidSum" {
    code {
      // Load calldata to memory
      calldata.copy()

      // Call a different method depending on method signature in calldata
      switch calldata.signature()

      /// @notice Deposit a token.
      /// @param account Address of token owner.
      /// @param token Token address.
      /// @dev Deposit::deposit
      case sig"deposit(address account, address token) external" {
        deposit(calldata.word(0), calldata.word(1))
      }

      /// @notice Commit a new root.
      /// @param merkleTreeRoot Root of transactions tree.
      /// @param token Token ID for fee payments for this root.
      /// @param fee Feerate for this root.
      /// @param transactions List of transactions.
      /// @dev Root::commitRoot
      case sig"commitRoot(bytes32 merkleTreeRoot, uint256 token,
        uint256 fee, bytes transactions, uint8 transactionType, bytes signatures) external" {
        commitRoot(calldata.word(0),
          keccak256(abi.offset(calldata.word(3)), abi.length(calldata.word(3))),
          abi.length(calldata.word(3)),
          calldata.word(1),
          calldata.word(2),
          calldata.word(4),
          keccak256(abi.offset(calldata.word(5)), abi.length(calldata.word(5)))
        )

        // get the signatures length and check it
        let signaturesLength := abi.length(calldata.word(5))

        // signatures available
        // we must ensure the signatures provided are 64 byte chunks and greater than zero length
        // uncomment this for the production version
        // require(gt(signaturesLength, 0), error"signatures-length-underflow")

        // signatures length % (chunksize * 2) === 0
        require(eq(mod(signaturesLength, mul(32, 2)), 0), error"signatures-length-mismatch")
      }

      /// @notice Commit a new block.
      /// @param minimum Minimum Ethereum block number that this commitment is valid for.
      /// @param minimumHash Minimum Ethereum block hash that this commitment is valid for.
      /// @param height Rollup block height.
      /// @param roots List of roots in block.
      /// @dev Block::commitBlock
      case sig"commitBlock(uint32 minimum, bytes32 minimumHash, uint32 height, bytes32[] roots) external" {
        commitBlock(
          calldata.word(0),
          calldata.word(1),
          calldata.word(2),
          abi.length(calldata.word(3)),
          abi.offset(calldata.word(3))
        )
      }

      /// @notice Commit a new witness. Used for authorizing rollup transactions via an Ethereum smart contract.
      /// @param transactionId Transaction ID to authorize.
      /// @dev Witness::commitWitness
      case sig"commitWitness(bytes32 transactionId) external" {
        commitWitness(calldata.word(0))
      }

      /// @notice Register a new address for cheaper transactions.
      /// @param addr Address to register.
      /// @param publicKeyA-D these are the BLS public key registration
      /// @return New ID assigned to address, or existing ID if already assigned.
      /// @dev Address::commitAddress
      case sig"commitAddress(address addr, uint256 publicKeyA, uint256 publicKeyB, uint256 publicKeyC, uint256 publicKeyD) external returns (uint256 id)" {
        return.word(commitAddress(
          calldata.word(0),
          calldata.word(1),
          calldata.word(2),
          calldata.word(3),
          calldata.word(4)))
      }

      //////////////////////////////////////////////////////////////////////////
      /// FRAUD PROOFS BEGIN
      //////////////////////////////////////////////////////////////////////////

      /// @notice Prove that a block was malformed.
      /// @param blockHeader Block header.
      /// @param rootHeader Full root header.
      /// @param rootIndex Index to root in block header.
      /// @param transactions List of transactions committed to in root.
      /// @dev provers::MalformedBlock::proveMalformedBlock
      case sig"proveMalformedBlock(bytes blockHeader, bytes rootHeader,
        uint16 rootIndex, bytes transactions) external" {
        let block := abi.offset(calldata.word(0))
        let root := abi.offset(calldata.word(1))
        let rootIndex := calldata.word(2)
        let transactions := abi.offset(calldata.word(3))
        let transactionsLength := abi.length(calldata.word(3))

        proveMalformedBlock(block, root, rootIndex, transactions, transactionsLength)
      }

      /// @notice Prove that a transaction was invalid.
      /// @param transactionProof Proof.
      /// @dev provers::InvalidTransaction::proveInvalidTransaction
      case sig"proveInvalidTransaction(bytes transactionProof) external" {
        proveInvalidTransaction(abi.offset(calldata.word(0)))
      }

      /// @notice Prove that an input was invalid.
      /// @param proofA First proof.
      /// @param proofB Second proof.
      /// @dev provers::InvalidInput::proveInvalidInput
      case sig"proveInvalidInput(bytes proofA, bytes proofB) external" {
        let transactionProofA := abi.offset(calldata.word(0))
        let transactionProofB := abi.offset(calldata.word(1))

        proveInvalidInput(transactionProofA, transactionProofB)
      }

      /// @notice Prove that a UTXO was double-spent.
      /// @param proofA Proof of UTXO being spent once.
      /// @param proofB Proof of UTXO being spent again.
      /// @dev provers::DoubleSpend::proveDoubleSpend
      case sig"proveDoubleSpend(bytes proofA, bytes proofB) external" {
        let transactionProofA := abi.offset(calldata.word(0))
        let transactionProofB := abi.offset(calldata.word(1))

        proveDoubleSpend(transactionProofA, transactionProofB)
      }

      /// @notice Prove that a witness was invalid.
      /// @param transactionProof Memory offset to start of transaction proof.
      /// @param inputProofs Memory offset of start of input proofs.
      /// @dev provers::InvalidWitness::proveInvalidWitness
      case sig"proveInvalidWitness(bytes transactionProof, bytes inputProofs) external" {
        proveInvalidWitness(abi.offset(calldata.word(0)), abi.offset(calldata.word(1)))
      }

      /// @notice Prove a BLS aggregate witness is incorrect
      /// @param blockHeader the bytes data for a fraudulant Fuel block header
      case sig"proveInvalidAggregateWitness(bytes blockHeader) external" {
        Constructor.copy(0)

        // Get the Fraud Prover contract address and the fraud block hash
        const fraudProver := Constructor.blsFraudProver(0)
        const fraudBlockHash := BlockHeader.keccak256(_calldata)

        // store block height at 512
        mstore(0, sig"isBlockFraudulant(bytes32 blockHash) public returns (bool isFraudulent)")
        mstore(32, fraudBlockHash)

        // call the fraud prover contract to check if this block hash is invalid
        require(call(gas(), fraudProver, 0, 28, 36, 512, 32), error"fraud-prover-reverted")

        // if call success to fraud prover
        let isFraudulent := mload(512)
        require(lte(isFraudulent, 0), error"block-not-fraudulent")

        // assert fraud, the block is fraudulent
        assertOrFraud(0, error"invalid-aggregate-witness", _calldata)
      }

      /// @notice Prove that a transation produced more than it consumed.
      /// @param transactionProof Memory offset to start of transaction proof.
      /// @param inputProofs Memory offset of start of input proofs.
      /// @dev provers::InvalidSum::proveInvalidSum
      case sig"proveInvalidSum(bytes transactionProof, bytes inputProofs) external" {
        proveInvalidSum(abi.offset(calldata.word(0)), abi.offset(calldata.word(1)))
      }

      //////////////////////////////////////////////////////////////////////////
      /// FRAUD PROOFS END
      //////////////////////////////////////////////////////////////////////////

      /// @notice Complete a withdrawal.
      /// @param proof Inclusion proof for withdrawal on the rollup chain.
      /// @dev Withdraw::withdraw
      case sig"withdraw(bytes proof) external" {
        withdraw(abi.offset(calldata.word(0)))
      }

      /// @notice Withdraw the block proposer's bond for a finalized block.
      /// @param blockHeader Rollup block header of block to withdraw bond for.
      /// @dev Withdraw::bondWithdraw
      case sig"bondWithdraw(bytes blockHeader) external" {
        bondWithdraw(abi.offset(calldata.word(0)))
      }

      /// @notice Get the transaction ID a registered witness authorizes.
      /// @param account Authorizing address.
      /// @param blockNumber Ethereum block number registration took place.
      /// @return Transaction ID being authorized, 0 if witness is not registered.
      /// @dev Witness::witnessAt
      case sig"witnessAt(address account, uint32 blockNumber) external view returns (bytes32 transactionId)" {
        return.word(witnessAt(calldata.word(0),
          calldata.word(1)))
      }

      /// @notice Calculate the funnel contract address for an account.
      /// @param account Account to calculate address for.
      /// @return Fuel contract address.
      /// @dev FunnelFactory::calculateFunnelAddress
      case sig"funnel(address account) external view returns (address)" {
        return.word(calculateFunnelAddress(calldata.word(0)))
      }

      /// @notice Verify a rollup block header.
      /// @param blockHeader Block header.
      /// @param root Root to verify.
      /// @param rootIndex Index of root in block header.
      /// @param assertFinalized Enum flag. 0: Assert finalized. 1: Assert not finalized. 2: No assert.
      /// @return If block header passes verification.
      /// @dev verifiers::BlockHeader::verifyHeader
      case sig"verifyHeader(bytes blockHeader, bytes root, uint256 rootIndex, uint8 assertFinalized) external view returns (bool)" {
        verifyHeader(
          abi.offset(calldata.word(0)),
          abi.offset(calldata.word(1)),
          calldata.word(2),
          calldata.word(3)
        )
        return.word(true)
      }

      /// @notice Verify a transaction.
      /// @param proof Transcation proof.
      /// @param assertFinalized Enum flag. 0: Assert finalized. 1: Assert not finalized. 2: No assert.
      /// @return If transaction passes verification.
      /// @dev verifiers::TransactionProof::verifyTransactionProof
      case sig"verifyTransaction(bytes proof, uint8 assertFinalized) external view returns (bool)" {
        verifyTransactionProof(
          abi.offset(calldata.word(0)),
          calldata.word(1)
        )
        return.word(true)
      }

      /// @notice Extract a UTXO from a proof.
      /// @param proof Proof.
      /// @return UTXO data structure.
      /// @dev Transaction::TransactionProof.UTXO.assign
      case sig"selectUTXO(bytes proof) external view returns (
        bytes32 transactionId,
        uint8 outputIndex,
        uint8 outputType,
        address owner,
        uint256 amount,
        uint32 token,
        bytes32 digest,
        uint256 expiry,
        address returnOwner)" {
        TransactionProof.UTXO.assign(abi.offset(calldata.word(0)), 0)
        return (0, UTXO.size(0))
      }

      /// @notice Extract an output from a proof.
      /// @param proof Proof.
      /// @return The output.
      /// @dev Transaction::selectOutput
      case sig"selectOutput(bytes proof) external view returns (bytes output)" {
        let pos := selectOutput(abi.offset(calldata.word(0)))
        mstore(sub(pos, 64), 32)
        mstore(sub(pos, 32), outputSize(pos))
        return (pos, round32(outputSize(pos)))
      }

      // produce block hash
      case sig"blockHash(bytes proof) external view returns (bytes32 blockHash)" {
        mstore(0, BlockHeader.keccak256(_calldata))
        return (0, 32)
      }

      // root hash
      case sig"rootHash(bytes proof) external view returns (bytes32 rootHash)" {
        mstore(0, RootHeader.keccak256(_calldata))
        return (0, 32)
      }

      /// @notice Extract output metadata from a proof.
      /// @param proof Proof.
      /// @return The output metadata.
      /// @dev Transaction::outputMetadata
      case sig"outputMetadata(bytes proof) external view returns (uint256 metadata)" {
        let metadata := outputMetadata(abi.offset(calldata.word(0)))
        return.word(metadata)
      }

      /// @notice Extract input metadata from a proof.
      /// @param proof Proof.
      /// @return The input metadata.
      /// @dev Transaction::inputMetadata
      case sig"inputMetadata(bytes proof) external view returns (uint256 metadata)" {
        let metadata := inputMetadata(abi.offset(calldata.word(0)))
        return.word(metadata)
      }

      /// @notice Extract metadata at a given index from a proof.
      /// @param proof Proof.
      /// @param index Metadata index.
      /// @return The metadata.
      /// @dev Transaction::selectMetadata
      case sig"selectMetadata(bytes proof, uint8 index) external view returns (bytes8 metadata)" {
        let pos := selectMetadata(abi.offset(calldata.word(0)), calldata.word(1))
        return.word(mslice(pos, 8))
      }

      /// @notice Get the operator address.
      /// @return The operator address.
      case sig"operator() external view returns (address operator)" {
        Constructor.copy(0)
        return(Constructor.operator.position(0), 32)
      }

      /// @notice Get the rollup block height tip.
      /// @return The tip height.
      /// @dev Block::blockTip
      case sig"blockTip() external view  returns (uint256 blockTip)" {
        return.word(blockTip())
      }

      /// @notice Get number of registered tokens.
      /// @return The number of registered tokens.
      /// @dev Tokens::numTokens
      case sig"numTokens() external view  returns (uint256 numTokens)" {
        return.word(numTokens())
      }

      /// @notice Get token ID of a token.
      /// @param token Address of token contract.
      /// @return The token ID. 0 if not registered.
      /// @dev Tokens::tokenId
      case sig"tokenId(address token) external view  returns (uint256 tokenId)" {
        return.word(tokenId(calldata.word(0)))
      }

      /// @notice Get number of registered addresses.
      /// @return The number of registered addresses.
      /// @dev Address::numAddresses
      case sig"numAddresses() external view  returns (uint256 numAddresses)" {
        return.word(numAddresses())
      }

      /// @notice Get address ID of an address.
      /// @param owner Registered address.
      /// @return The address ID. 0 if not registered.
      /// @dev Address::addressId
      case sig"addressId(address owner) external view  returns (uint256 addressId)" {
        return.word(addressId(calldata.word(0)))
      }

      /// @notice Get the public key hash for a specific owner
      /// @param owner Registered address.
      case sig"publicKeyHash(address owner) external view returns (bytes32 hash)" {
        return.word(publicKeyHash(calldata.word(0)))
      }

      /// @notice Get deposit amount for a particular deposit.
      /// @param account Account that deposited.
      /// @param token Deposited token ID.
      /// @param blockNumber Ethereum block number the deposit was made.
      /// @return The deposit amount. 0 if no deposit made.
      /// @dev Deposit::depositAt
      case sig"depositAt(address account, uint32 token, uint32 blockNumber) external view  returns (uint256 amount)" {
        return.word(depositAt(
          calldata.word(0),
          calldata.word(1),
          calldata.word(2)
        ))
      }

      /// @notice Get block hash for a given rollup block height.
      /// @param blockHeight Rollup block height.
      /// @return The rollup block hash at the height.
      /// @dev Block::blockCommitment
      case sig"blockCommitment(uint256 blockHeight) external view  returns (bytes32 blockHash)" {
        return.word(blockCommitment(calldata.word(0)))
      }

      /// @notice Get Ethereum block number root was committed at.
      /// @param root Root.
      /// @return The Ethereum block number.
      /// @dev Root::rootBlockNumberAt
      case sig"rootBlockNumberAt(bytes32 root) external view  returns (uint256 blockNumber)" {
        return.word(rootBlockNumberAt(calldata.word(0)))
      }

      /// @notice Is a withdrawal processed (completed).
      /// @param blockHeight Rollup block height of withdrawal.
      /// @param withdrawalId Withdrawal ID.
      /// @return If the withdrawal has been processed.
      /// @dev Withdraw::isWithdrawalProcessed
      case sig"isWithdrawalProcessed(uint256 blockHeight, bytes32 withdrawalId) external view returns (bool withdrawn)" {
        return.word(isWithdrawalProcessed(calldata.word(0), calldata.word(1)))
      }

      /// @notice Get bond size constant.
      /// @return Bond size.
      case sig"BOND_SIZE() external view returns (uint256)" {
        Constructor.copy(0)
        return(Constructor.bondSize.position(0), 32)
      }

      /// @notice Get maximum size of transactions committed to in a root constant, in bytes.
      /// @return Max root size.
      case sig"MAX_ROOT_SIZE() external view returns (uint256)" {
        return.word(MAX_ROOT_SIZE)
      }

      /// @notice Get submission delay constant. Ethereum blocks non-operator must wait after committing a root before committing to a block that includes it.
      /// @return Submission delay.
      case sig"SUBMISSION_DELAY() external view returns (uint256)" {
        Constructor.copy(0)
        return(Constructor.submissionDelay.position(0), 32)
      }

      /// @notice Get finalization delay constant. Ethereum blocks before rollup blocks are finalized.
      /// @return Finalization delay.
      case sig"FINALIZATION_DELAY() external view returns (uint256)" {
        Constructor.copy(0)
        return(Constructor.finalizationDelay.position(0), 32)
      }

      /// @notice Get penalty delay constant. Ethereum blocks after a fraud during which anyone may commit new blocks without submission delay.
      /// @return Penalty delay.
      case sig"PENALTY_DELAY() external view returns (uint256)" {
        Constructor.copy(0)
        return(Constructor.penaltyDelay.position(0), 32)
      }

      /// @notice Get penalty delay constant. Ethereum blocks after a fraud during which anyone may commit new blocks without submission delay.
      /// @return Penalty delay.
      case sig"CHAIN_ID() external view returns (uint256)" {
        Constructor.copy(0)
        return(Constructor.chainId.position(0), 32)
      }

      /// @notice Get penalty delay constant. Ethereum blocks after a fraud during which anyone may commit new blocks without submission delay.
      /// @return Penalty delay.
      case sig"BLS_FRAUD_PROVER() external view returns (address)" {
        Constructor.copy(0)
        return(Constructor.blsFraudProver.position(0), 32)
        // mstore(0, 0)
        // return(0, 32)
      }

      /// @notice Get Ethereum block number until which operator is penalized.
      /// @return Current penalty block.
      case sig"penalty() external view returns (uint256)" {
        return.word(getPenalty())
      }

      /// @notice Get contract name.
      /// @return Name.
      case sig"name() external view returns (string)" {
        Constructor.copy(0)
        Constructor.name.copy(0, 0)
        return(0, 96)
      }

      /// @notice Get contract version.
      /// @return Version.
      case sig"version() external view returns (string)" {
        Constructor.copy(0)
        Constructor.version.copy(0, 0)
        return(0, 96)
      }

      /// @notice Not one of the above, invalid method signature.
      default {
        require(0, error"invalid-signature")
      }

      // Ensure execution stops
      stop()
    }
  }
}
