/// @title Transaction output
/// @notice Transaction produce outputs.
object "Outputs" {
  code {
    enum OutputType (
      // Simple transfer UTXO, no special conditions
      Transfer,
      // Burn coins to enable withdrawing them
      Withdraw,
      // An HTLC UTXO
      HTLC,
      // A non-send; used for posting data
      Return
    )

    /// @notice Generic output. Transfer and Withdraw.
    mstruct Output (
      // Output type
      type: uint8,
      token.length: uint8,
      // Token ID, as varint
      token: [bytes1],
      amount.shift: uint8,
      amount.length: uint8,
      // Amount of tokens, as packed varint
      amount: [uint8],
      owner.length: uint8,
      // Recipient, as varint
      owner: [bytes1]
    )

    /// @notice An HTLC output.
    mstruct OutputHTLC (
      // Output type
      type: uint8,
      token.length: uint8,
      // Token ID, as varint
      token: [bytes1],
      amount.shift: uint8,
      amount.length: uint8,
      // Amount of tokens, as packed varint
      amount: [uint8],
      owner.length: uint8,
      // Recipient, as varint
      owner: [bytes1],
      // Hashlock digest
      digest: bytes32,
      // Timelock expiry (Ethereum block number)
      expiry: uint32,
      returnOwner.length: uint8,
      // Return owner if timelock expires, as varint
      returnOwner: [bytes1]
    )

    /// @notice A Return output. Not added to rollup state.
    mstruct OutputReturn (
      // Output type
      type: uint8,
      data.length: uint16,
      // Raw data byte array
      data: [bytes1]
    )

    /// @notice A rollup state element: a UTXO. The UTXO ID is the hash of its fields.
    mstruct UTXO (
      // Transaction ID (witnesses sign over this value)
      transactionId: bytes32,
      // Output index in list of outputs
      outputIndex: uint256,
      outputType: uint256,
      owner: bytes32,
      amount: uint256,
      token: uint256,
      digest: bytes32,
      expiry: uint256,
      returnOwner: bytes32
    )

    /// @notice Parse out the amount from an output object.
    function outputAmount(output) -> amount {
      let pos := Output.amount.position(output)
      let shift := Output.amount.shift(output)
      let len := Output.amount.length(output)

      require(lte(len, 32), "amount-length-overflow")
      require(lte(shift, 256), "amount-shift-overflow")
      require(lte(add(shift, mul(len, 8)), 256), "amount-overflow")

      amount := shl(shift, mslice(pos, len))
    }

    /// @notice Get the size of an output object.
    function outputSize(output) -> size {
      switch Output.type(output)

      case OutputType.Transfer {
        size := Output.size(output)
      }

      case OutputType.Withdraw {
        size := Output.size(output)
      }

      case OutputType.HTLC {
        size := OutputHTLC.size(output)
      }

      case OutputType.Return {
        size := OutputReturn.size(output)
      }

      default { // avoid infinite loops
        size := 20
      }
    }

    /// @notice Parse out the token ID from an output object.
    function outputToken(output) -> id {
      id := Output.token.slice(output)
    }

    /// @notice Checks non-Return output owner.
    /// @return If output owner matches as bool
    function ownerEquates(output, owner) -> result {
      let len := Output.owner.length(output)

      // Length of owner field must be <= 20 bytes
      require(gt(len, 0), error"owner-length-underflow")
      require(lte(len, 20), error"owner-length-overflow")

      switch len

      case 20 { // raw address
        result := or(
          eq(Output.owner.slice(output), owner),
          eq(Output.owner.slice(output), calculateFunnelAddress(owner))
        )
      }

      default { // registered address ID
        let id := Output.owner.slice(output)
        result := or(
          eq(id, addressId(owner)),
          eq(id, addressId(calculateFunnelAddress(owner)))
        )
      }
    }

    /// @notice Checks HTLC's return owner.
    /// @return If output owner matches as bool
    function returnOwnerEquals(output, owner) -> result {
      let len := OutputHTLC.returnOwner.length(output)

      require(gt(len, 0), error"owner-length-underflow")
      require(lte(len, 20), error"owner-length-overflow")

      switch len

      case 20 { // raw address
        result := or(
          eq(OutputHTLC.returnOwner.slice(output), owner),
          eq(OutputHTLC.returnOwner.slice(output), calculateFunnelAddress(owner))
        )
      }

      default { // registered address ID
        let id := OutputHTLC.returnOwner.slice(output)
        result := or(
          eq(id, addressId(owner)),
          eq(id, addressId(calculateFunnelAddress(owner)))
        )
      }
    }
  }
}
