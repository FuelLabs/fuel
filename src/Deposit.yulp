import "./Storage.yulp"
import "./Tokens.yulp"
import "./FunnelFactory.yulp"

/// @title Deposit object
/// @notice Uniquely indexes an on-chain ETH or token deposit.
object "Deposit" is "Storage", "Tokens", "FunnelFactory" {
  code {
    mstruct Deposit (
      // Owner of deposit
      owner: bytes32,
      // Token ID (0 for ETH)
      token: uint256,
      // Ethereum block number deposit was registered
      blockNumber: uint256,
      // Amount of tokens
      value: uint256
    )

    /// @notice Get deposit at key
    /// @return Amount of tokens as uint256
    function depositAt(owner, token, blockNumber) -> amount {
      amount := sload(mappingKey3(Storage.Deposits, owner, token, blockNumber))
    }

    /// @notice Handle token deposit.
    function deposit(owner, token) {
      // Get token ID (0 for ETH).
      // If token has not yet been deposited, a new token ID will be assigned.
      let _tokenId := commitToken(token)

      // Build create2 deposit funnel contract
      let funnel := createFunnel(owner)

      // Variables
      let amount := 0

      // handle different tokens
      switch token

      // If ETH
      case 0 {
          amount := balance(funnel)
          require(gt(amount, 0), error"value-underflow")
          require(call(gas(), funnel, 0, 0, 0, 0, 0), error"value-funnel")
          require(eq(balance(funnel), 0), error"value-check")
      }

      // If ERC-20
      default {
        require(or(iszero(balance(funnel)), eq(token, 0)), error"ether-first")

        mstore(0, sig"balanceOf(address)", funnel)
        require(call(gas(), token, 0, 28, 36, 0, 32), error"balance-call")
        amount := mload(0)
        require(gt(amount, 0), error"balance-underflow")

        mstore(0, token, sig"transfer(address, uint256)", address(), amount)
        require(call(gas(), funnel, 0, 0, 128, 0, 0), error"transfer-call")

        mstore(0, sig"balanceOf(address)", funnel)
        require(call(gas(), token, 0, 28, 36, 0, 32), error"balance-call")
        require(iszero(mload(0)), error"balance-check")
      }

      // Load current balance from storage
      // Deposits are uniquely identified by owner, token, and Ethereum block numbers, so a second deposit in the same block will simply update a single deposit object
      let balanceAmount := depositAt(owner, _tokenId, number())
      sstore(mappingKey3(Storage.Deposits, owner, _tokenId, number()), add(balanceAmount, amount))

      mstore(0, amount)
      log3(0, mul32(1),
        topic"event DepositMade(address indexed owner, uint32 indexed token, uint256 value)",
        owner,
        _tokenId)
    }
  }
}
