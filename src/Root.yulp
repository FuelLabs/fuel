import "./Storage.yulp"
import "./Tokens.yulp"

/// @title Root object
/// @notice Roots represent a commitment to a list of transactions.
object "Root" is "Storage", "Tokens" {
  code {
    // Maximum size of list of transactions, in bytes
    const MAX_ROOT_SIZE := 57600
    // Maximum number of transactions in list of transactions
    const MAX_TRANSACTIONS_IN_ROOT := 2048

    /// @notice Transaction root header object. Contains Merkle tree root and important metadata.
    mstruct RootHeader (
      // Address of root producer
      producer: address,
      // Merkle root of list of transactions
      merkleTreeRoot: bytes32,
      // Simple hash of list of transactions
      commitmentHash: bytes32,
      // Length of list of transactions, in bytes
      length: uint256,
      // Token ID of all fees paid in this root
      feeToken: uint256,
      // Feerate of all fees paid in this root
      fee: uint256
    )

    function rootBlockNumberAt(root) -> blockNumber {
      blockNumber := sload(mappingKey(Storage.Roots, root))
    }

    function clearRoot(root) {
      sstore(mappingKey(Storage.Roots, root), 0)
    }

    function commitRoot(merkleTreeRoot, commitmentHash, length, token, fee) {
      // Caller/msg.sender must not be a contract
      require(eq(origin(), caller()), error"origin-not-caller")
      require(eq(extcodesize(caller()), 0), error"is-contract")

      // Calldata size must be at least as big as the minimum transaction size (44 bytes)
      require(gte(length, 44), error"root-size-underflow")
      // Calldata max size enforcement (4M gas / 68 gas per byte)
      require(lte(calldatasize(), add(MAX_ROOT_SIZE, mul32(6))), error"root-size-overflow")

      // Fee token must be already registered
      require(gte(token, 0), error"token-underflow")
      require(lt(token, numTokens()), error"token-overflow")

      // Build root
      mstore(0, caller(), merkleTreeRoot, commitmentHash, length, token, fee)
      // Hash the block header with an offset of 12 bytes, since first field is a 32-12=20 byte address.
      const root := RootHeader.keccak256(12)

      // Root must not have been registered yet
      let rootBlockNumber := sload(mappingKey(Storage.Roots, root))
      require(eq(rootBlockNumber, 0), error"root-already-exists")

      // Register root with current block number
      sstore(mappingKey(Storage.Roots, root), number())

      // Store caller in data
      mstore(0, caller(), token, fee, length)
      log4(
        0,
        mul32(4),
        topic"event RootCommitted(
          bytes32 indexed root,
          address rootProducer,
          uint256 feeToken,
          uint256 fee,
          uint256 rootLength,
          bytes32 indexed merkleTreeRoot,
          bytes32 indexed commitmentHash)",
        root,
        merkleTreeRoot,
        commitmentHash
      )
    }
  }
}
