import "./Constructor.yulp"
import "./Address.yulp"
import "./Root.yulp"

/// @title Block object
object "Block" is "Constructor", "Root", "Address" {
  code {
    const TRANSACTION_ROOTS_MAX := 128
    const Not_Finalized := false
    const Finalized := true
    const No_Assertion := 2

    mstruct BlockHeader (
      producer: address,
      previousBlockHash: bytes32,
      height: uint256,
      ethereumBlockNumber: uint256,
      numTokens: uint256,
      numAddresses: uint256,
      roots.length: uint16,
      roots: [bytes32]
    )

    function FINALIZATION_DELAY() -> delay {
      Constructor.copy(0)
      delay := Constructor.finalizationDelay(0)
    }

    function blockTip() -> blockNumber {
      blockNumber := sload(Storage.BlockTip)
    }

    function blockCommitments(blockNumber) -> blockHash {
      blockHash := sload(mappingKey(Storage.BlockCommitments, blockNumber))
    }

    function getPenalty() -> blockNumber {
      blockNumber := sload(Storage.Penalty)
    }

    function setPenalty(delay) {
      sstore(Storage.Penalty, add(number(), delay))
    }

    function commitBlock(minimum, height, rootsLength, rootsPosition) {
      let _blockTip := blockTip()
      let previousBlockHash := blockCommitments(sub(height, 1))

      // block tip check
      require(gt(number(), minimum), error"minimum-height")

      // min height
      require(eq(height, add(_blockTip, 1)), error"block-height")

      // Require at least one root submission
      require(gt(rootsLength, 0), error"roots-length-underflow")

      // Require at least one root submission
      require(lte(rootsLength, TRANSACTION_ROOTS_MAX), error"roots-length-overflow")

      // get the operator
      Constructor.copy(0)
      let producer := Constructor.blockProducer(0)
      let submissionDelay := Constructor.submissionDelay(0)
      let activePenalty := getPenalty()

      // Require value be bond size
      require(eq(callvalue(), Constructor.bondSize(0)), error"bond-value")

      // Root index
      for { let rootIndex := 0 } lt(rootIndex, rootsLength) { rootIndex := add(rootIndex, 1) } {
        let rootHash := mload(add(rootsPosition, mul(rootIndex, 32)))
        let rootBlockNumber := roots(rootHash)

        require(gt(rootBlockNumber, 0), error"root-existance")

        if and(lt(number(), add(rootBlockNumber, submissionDelay)), gt(number(), activePenalty)) {
          require(eq(caller(), producer), error"caller-producer")
        }

        clearRoot(rootHash)
      }

      // Build a BlockHeader
      mstore(sub(rootsPosition, 34), numAddresses())
      mstore(sub(rootsPosition, 66), numTokens())
      mstore(sub(rootsPosition, 98), number())
      mstore(sub(rootsPosition, 130), height)
      mstore(sub(rootsPosition, 162), previousBlockHash)
      mstore(sub(rootsPosition, 194), caller())
      sstore(mappingKey(Storage.BlockCommitments, height),
        BlockHeader.keccak256(sub(rootsPosition, 182)))

      // block height
      sstore(Storage.BlockTip, height)

      // build log out of calldata
      mstore(sub(rootsPosition, 160), caller())
      mstore(sub(rootsPosition, 128), numTokens())
      mstore(sub(rootsPosition, 96), numAddresses())
      mstore(sub(rootsPosition, 64), 128)
      mstore(sub(rootsPosition, 32), rootsLength)
      log3(sub(rootsPosition, 160), add(160, mul32(rootsLength)),
        topic"event BlockCommitted(
          address producer,
          uint256 numTokens,
          uint256 numAddresses,
          bytes32 indexed previousBlockHash,
          uint256 indexed height,
          bytes32[] roots)",
          previousBlockHash,
          height)
    }
  }
}
