import "./Constructor.yulp"
import "./Address.yulp"
import "./Root.yulp"

/// @title Block object
object "Block" is "Constructor", "Root", "Address" {
  code {
    const TRANSACTION_ROOTS_MAX := 128

    /// @notice Block header object
    mstruct BlockHeader (
      // Address of block proposer committing this rollup block
      producer: address,
      // Previous rollup block's header hash
      previousBlockHash: bytes32,
      // Rollup block height
      height: uint256,
      // Ethereum block number when this rollup block is committed
      blockNumber: uint256,
      // Maximum token ID used in this rollup block
      numTokens: uint256,
      // Maximum address ID used in this rollup block
      numAddresses: uint256,
      // Number of transaction roots
      roots.length: uint16,
      // List of transaction roots. Each root is the Merkle root of a list of transactions.
      roots: [bytes32]
    )

    /// @notice Helper function to get finalization delay, extracted from constructor.
    /// @return Finalization delay in Ethereum blocks as uint256
    function FINALIZATION_DELAY() -> delay {
      Constructor.copy(0)
      delay := Constructor.finalizationDelay(0)
    }

    /// @notice Get rollup block tip (i.e. current height).
    /// @return Block tip as uint256
    function blockTip() -> blockNumber {
      blockNumber := sload(Storage.BlockTip)
    }

    /// @notice Get rollup blockhash for given rollup block height.
    /// @return Blockhash as bytes32
    function blockCommitment(blockHeight) -> blockHash {
      blockHash := sload(mappingKey(Storage.BlockCommitments, blockHeight))
    }

    /// @notice Get penalty block number. The operator is penalized until this block number.
    /// @return Ethereum block number as uint256
    function getPenalty() -> blockNumber {
      blockNumber := sload(Storage.Penalty)
    }

    /// @notice Set penalty block number as delay from current block number. The operator is penalized until this block number.
    function setPenalty(delay) {
      sstore(Storage.Penalty, add(number(), delay))
    }

    /// @notice Commits a new rollup block.
    function commitBlock(minBlockNumber, minBlockHash, height, rootsLength, rootsPosition) {
      let _blockTip := blockTip()
      let previousBlockHash := blockCommitment(sub(height, 1))

      // To avoid Ethereum re-org attacks, commitment transactions include a minimum
      //  Ethereum block number and block hash. Check will fail if transaction is > 256 block old.
      require(gt(number(), minBlockNumber), error"minimum-block-number")
      require(eq(blockhash(minBlockNumber), minBlockHash), error"minimum-block-hash")

      // Check that new rollup blocks builds on top of the tip
      require(eq(height, add(_blockTip, 1)), error"block-height")

      // Require at least one root submission
      require(gt(rootsLength, 0), error"roots-length-underflow")

      // Require at most the maximum number of root submissions
      require(lte(rootsLength, TRANSACTION_ROOTS_MAX), error"roots-length-overflow")

      // Get the rollup operator
      Constructor.copy(0)
      let producer := Constructor.operator(0)

      // Require value be bond size
      require(eq(callvalue(), Constructor.bondSize(0)), error"bond-value")

      // Clear submitted roots from storage
      for { let rootIndex := 0 } lt(rootIndex, rootsLength) { rootIndex := add(rootIndex, 1) } {
        let rootHash := mload(add(rootsPosition, mul(rootIndex, 32)))
        let rootBlockNumber := rootBlockNumberAt(rootHash)

        // Check root exists
        require(gt(rootBlockNumber, 0), error"root-existance")

        // Check whether block producer has the right to commit rollup block
        // In penalty mode (second condition is true), anyone can commit a block with roots without delay
        // In normal mode (second condition is false), only the operator can commit a block before waiting the root delay
        if and(lt(number(), add(rootBlockNumber, Constructor.submissionDelay(0))),
          gt(number(), getPenalty())) {
          require(eq(caller(), producer), error"caller-producer")
        }

        // Clear root from storage
        clearRoot(rootHash)
      }

      // Build a BlockHeader object
      mstore(sub(rootsPosition, 34), numAddresses())
      mstore(sub(rootsPosition, 66), numTokens())
      mstore(sub(rootsPosition, 98), number())
      mstore(sub(rootsPosition, 130), height)
      mstore(sub(rootsPosition, 162), previousBlockHash)
      mstore(sub(rootsPosition, 194), caller())
      sstore(
        mappingKey(Storage.BlockCommitments, height),
        BlockHeader.keccak256(sub(rootsPosition, 182))
      )

      // Save new rollup block height as the tip
      sstore(Storage.BlockTip, height)

      // Build log out of calldata
      mstore(sub(rootsPosition, 160), caller())
      mstore(sub(rootsPosition, 128), numTokens())
      mstore(sub(rootsPosition, 96), numAddresses())
      mstore(sub(rootsPosition, 64), 128)
      mstore(sub(rootsPosition, 32), rootsLength)
      log3(
        sub(rootsPosition, 160),
        add(160, mul32(rootsLength)),
        topic"event BlockCommitted(
          address producer,
          uint256 numTokens,
          uint256 numAddresses,
          bytes32 indexed previousBlockHash,
          uint256 indexed height,
          bytes32[] roots)",
        previousBlockHash,
        height
      )
    }
  }
}
