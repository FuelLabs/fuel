import "./verifiers/TransactionProof.yulp"
import "./Fraud.yulp"

object "DoubleSpend" is "TransactionProof", "Fraud" {
  code {
    function inputOwner(transaction) -> addr {
      let input := selectInput(transaction)

      if eq(Input.type(input), InputType.Deposit) {
        addr := InputDeposit.owner(input)
      }
    }

    function proveDoubleSpend(transactionA, transactionB) {
      // Check for Invalid Transaction Double Spend (Same Input Twice)
      verifyTransactionProof(transactionA, 2)
      verifyTransactionProof(transactionB, 0)

       // Require the inputs are different
      require(neq(inputId(transactionA), inputId(transactionB)),
        error"input-id")

      // Metadata reference and input owner
      mstore(0, inputMetadataId(transactionA), inputOwner(transactionA))
      let hashA := keccak256(0, 64)

      // Metadata reference and input owner
      mstore(0, inputMetadataId(transactionB), inputOwner(transactionB))
      let hashB := keccak256(0, 64)

      // Assert Inputs are Different OR FRAUD Double Spend!
      assertOrFraud(neq(hashA, hashB), error"double-spend", transactionB)
    }
  }
}
