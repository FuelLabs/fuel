import "./verifiers/TransactionProof.yulp"
import "./Fraud.yulp"

/// @title Double spend prover module.
object "DoubleSpend" is "TransactionProof", "Fraud" {
  code {
    /// @notice Prove a double spend happened.
    /// @param transactionProofA Position in memory of proof of UTXO being spent once.
    /// @param transactionProofB Position in memory of proof of UTXO being spent again.
    function proveDoubleSpend(transactionProofA, transactionProofB) {
      // Verify both transaction proofs.
      verifyTransactionProof(transactionProofA, AssertFinalized.None)
      verifyTransactionProof(transactionProofB, AssertFinalized.NotFinalized)

       // Inputs must be different i.e. unique, their input metadata ID's will determine this.
      require(
        neq(
          inputMetadata(transactionProofA),
          inputMetadata(transactionProofB)
        ),
        error"input-id"
      )

      // Get hash of referenced metadata and input inner data of selected input.
      mstore(0,
        inputReferencedMetadata(transactionProofA),
        inputInnerData(transactionProofA)
      )
      let hashA := keccak256(0, 64)

      // Get hash of referenced metadata and input inner data of selected input.
      mstore(0,
        inputReferencedMetadata(transactionProofB),
        inputInnerData(transactionProofB)
      )
      let hashB := keccak256(0, 64)

      // Hashes must be different, otherwise a double spend happened.
      assertOrFraud(
        neq(
          hashA,
          hashB
        ),
        error"double-spend",
        transactionProofB
      )
    }
  }
}
