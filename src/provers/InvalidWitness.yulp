import "./Fraud.yulp"
import "./verifiers/Inputs.yulp"

/// @title Invalid witness prover
object "InvalidWitness" is "VerifyInputs", "Fraud" {
  code {
    /// @notice Helper: prove a witness is invalid.
    /// @param transactionProof Position in memory of transaction proof.
    /// @param inputProofs Position in memory of inputs proofs.
    function proveWitness(transactionProof, inputProofs) {
      // Get position in memory of start of leaf (i.e. transaction)
      let leaf := TransactionProof.transaction.position(transactionProof)
      // Get position in memory of start of transaction inputs
      let pos := TransactionLeaf.inputs.position(leaf)
      let index := 0

      // Loop over inputs. For each input, the recovered account address must match the owner.
      for {} lt(pos, TransactionLeaf.inputs.offset(leaf)) {} {
        switch Input.type(pos)

        case InputType.Transfer {
          if eq(index, TransactionProof.inputOutputIndex(transactionProof)) {
            assertOrFraud(ownerEquates(selectOutput(inputProofs),
              TransactionProof.input.recoverWitness(transactionProof)), error"utxo-witness", transactionProof)
          }

          inputProofs := add(inputProofs, TransactionProof.size(inputProofs))
        }

        case InputType.Deposit {
          if eq(index, TransactionProof.inputOutputIndex(transactionProof)) {
            assertOrFraud(eq(Deposit.owner(inputProofs),
              TransactionProof.input.recoverWitness(transactionProof)),
              error"deposit-witness", transactionProof)
          }

          inputProofs := add(inputProofs, Deposit.size(inputProofs))
        }

        case InputType.Root {
          if eq(index, TransactionProof.inputOutputIndex(transactionProof)) {
            assertOrFraud(eq(TransactionProof.blockProducer(inputProofs),
              TransactionProof.input.recoverWitness(transactionProof)), error"root-witness", transactionProof)
          }

          inputProofs := add(inputProofs, TransactionProof.size(inputProofs))
        }

        case InputType.HTLC {
          if eq(index, TransactionProof.inputOutputIndex(transactionProof)) {
            switch outputExpired(inputProofs, transactionProof)

            case 1 {
              assertOrFraud(returnOwnerEquals(selectOutput(inputProofs),
                TransactionProof.input.recoverWitness(transactionProof)),
                error"htlc-owner-return", transactionProof)
            }

            case 0 {
              assertOrFraud(ownerEquates(selectOutput(inputProofs),
                TransactionProof.input.recoverWitness(transactionProof)),
                error"htlc-owner", transactionProof)
            }
          }

          inputProofs := add(inputProofs, TransactionProof.size(inputProofs))
        }

        if eq(index, TransactionProof.inputOutputIndex(transactionProof)) {
          assertOrFraud(neq(TransactionProof.input.recoverWitness(transactionProof), 0),
            error"null-witness", transactionProof)
        }

        index := add(index, 1)
        pos := add(pos, inputSize(pos))
      }
    }

    /// @notice Prove a witness was invalid.
    /// @param transactionProof Position in memory of transaction proof.
    /// @param inputProofs Position in memory of inputs proofs.
    function proveInvalidWitness(transactionProof, inputProofs) {
      verifyInputs(transactionProof, inputProofs)
      proveWitness(transactionProof, inputProofs)
    }
  }
}
