import "./verifiers/Witness.yulp"
import "./verifiers/Data.yulp"
import "./verifiers/TransactionProof.yulp"
import "./Fraud.yulp"

/// @title Invalid sum prover.
object "InvalidSum" is "TransactionProof", "VerifyData", "VerifyWitness", "Fraud" {
  code {
    /// @notice Fraudulant summing, incase of overflow, we conclude fraud.
    /// @param x The first value to sum.
    /// @param y The second value to sum.
    /// @param transactionProof The fraudulant proof incase summing overflows.
    /// @return z The sum of the two values.
    function assertAddOrFraud(x, y, transactionProof) -> z {
      z := unsafeAdd(x, y)
      assertOrFraud(
        or(
          eq(z, x),
          gt(z, x)
        ),
        error"summing-overflow",
        transactionProof
      )
    }

    /// @notice Fraudulant multiplying, incase of overflow, we conclude fraud.
    /// @param x The first value to multiply.
    /// @param y The second value to multiply.
    /// @return z The multiple of the two values.
    function assertMulOrFraud(x, y, transactionProof) -> z {
      if gt(y, 0) {
        /// @dev this should be unsafeMul
        z := unsafeMul(x, y)
        /// @dev should be unsave div?
        assertOrFraud(
          eq(
            unsafeDiv(z, y), 
            x
          ),
          error"summing-mul-overflow",
          transactionProof
        )
      }
    }

    /// @notice Compute sum of inputs in token specified in transaction proof.
    /// @param transactionProof Position in memory of transaction proof.
    /// @param inputProofs Position in memory of inputs proofs.
    /// @return Sum of inputs in token.
    function ins(transactionProof, inputProofs) -> sum {
      // Get the memory position of the first input.
      let pos := TransactionLeaf.inputs.position(
        TransactionProof.transaction.position(transactionProof)
      )

      // Get the token id of the first token address.
      let token := tokenId(
        TransactionProof.tokenAddress(transactionProof)
      )

      // Go through each input (dually, both the proof and the input itself.).
      for {}
        // Go through each of the inputs for this transaction.
        lt(
          pos,
          TransactionLeaf.inputs.offset(
            TransactionProof.transaction.position(
              transactionProof
            )
          )
        ) {} {
        // Switch case based upon the type.
        switch Input.type(pos)

        // If the input is a Transfer type.
        case InputType.Transfer {
          if eq(token, UTXO.token(inputProofs)) {
            sum := assertAddOrFraud(
              sum,
              UTXO.amount(inputProofs),
              transactionProof
            )
          }

          // Increase the input memory pointer by the proof size.
          inputProofs := add(inputProofs, UTXO.size(inputProofs))
        }

        // If the input is a Transfer type.
        case InputType.Deposit {
          if eq(token, Deposit.token(inputProofs)) {
            sum := assertAddOrFraud(
              sum,
              Deposit.amount(inputProofs),
              transactionProof
            )
          }

          // Increase the input memory pointer by the proof size.
          inputProofs := add(inputProofs, Deposit.size(inputProofs))
        }

        // If the input is a Transfer type.
        case InputType.HTLC {
          if eq(token, UTXO.token(inputProofs)) {
            sum := assertAddOrFraud(
              sum,
              UTXO.amount(inputProofs),
              transactionProof
            )
          }

          // Increase the input memory pointer by the proof size.
          inputProofs := add(inputProofs, UTXO.size(inputProofs))
        }

        // If the input is a Transfer type.
        case InputType.Root {
          let root := TransactionProof.rootProducer.position(inputProofs)

          if eq(token, RootHeader.feeToken(root)) {
            sum := assertAddOrFraud(
              sum,
              assertMulOrFraud(
                RootHeader.fee(root),
                RootHeader.length(root),
                transactionProof
              ),
              transactionProof
            )
          }

          // Increase the input memory pointer by the proof size.
          inputProofs := add(inputProofs, TransactionProof.size(inputProofs))
        }

        default {
          // If the input type is invalid, revert. This should be handled in proveInvalidTransaction.
          require(0, error"invalid-type")
        }

        // increase the memory position pointer by the input size.
        pos := add(pos, inputSize(pos))
      }
    }

    /// @notice Compute sum of outputs in given token.
    /// @param token Token ID.
    /// @param transactionProof Position in memory of transaction proof.
    /// @return Sum of outputs in token.
    function outs(token, transactionProof) -> sum {
      // Get the position of the lead.
      let leaf := TransactionProof.transaction.position(transactionProof)

      // Get the start of the outputs position.
      let pos := TransactionLeaf.outputs.position(leaf)

      // Get the end of the output position.
      let end := TransactionLeaf.outputs.offset(leaf)

      // Go through each of the outputs.
      for {} lt(pos, end) {} {
        // If the output is not a return type and the token ID is correct.
        if and(
          lt(Output.type(pos), OutputType.Return),
          eq(token, Output.token.slice(pos))
        ) {
          // Add this output amount to the sum of the transaction proof.
          sum := assertAddOrFraud(
            sum,
            outputAmount(pos),
            transactionProof
          )
        }

        // Increase the memory position by the output size.
        pos := add(pos, outputSize(pos))
      }
    }

    /// @notice Helper function to prove that sum of outputs violates sum of inputs, assuming proofs are verified.
    /// @param transactionProof Position in memory of transaction proof.
    /// @param inputProofs Position in memory of inputs proofs.
    function proveSum(transactionProof, inputProofs) {
      // Token id.
      let token := tokenId(TransactionProof.tokenAddress(transactionProof))

      // Total out sum.
      let outsum := assertAddOrFraud(
        rootFee(transactionProof, token),
        outs(token, transactionProof),
        transactionProof
      )

      // Total input sum.
      let insum := ins(transactionProof, inputProofs)

      // Assert out to input sum.
      assertOrFraud(
        eq(
          outsum,
          insum
        ),
        error"sum",
        transactionProof
      )
    }

    /// @notice Prove that the sum of outputs violates the sum of inputs.
    /// @param transactionProof Position in memory of transaction proof.
    /// @param inputProofs Position in memory of inputs proofs.
    function proveInvalidSum(transactionProof) {
      // Verify the transaction proof (where fraud is alleged.).
      verifyTransactionProof(transactionProof, AssertFinalized.NotFinalized)

      // We now get the input proofs from the TransactionProof not the ABI.
      let inputProofs := TransactionProof.inputProofs.position(transactionProof)

      // Switch to this model.
      verifyWitness(transactionProof)

      // Verify the data of the transaction.
      verifyData(transactionProof, inputProofs, INPUTS_MAX)

      // Verify/prove fraud of the total sum of the transaction (inputs to outputs).
      proveSum(transactionProof, inputProofs)
    }
  }
}
