import "./Storage.yulp"

/// @title Token registry
/// @notice Assigns a unique ID for registered tokens.
object "Tokens" is "Storage" {
  code {
    const ETHER_TOKEN_ADDRESS := 0
    const MAX_TOKEN_ID := 0xFFFFFFFF

    /// @notice Get number of registered tokens.
    /// @return Number of tokens as uint256
    function numTokens() -> num {
      num := sload(Storage.NumTokens)
    }

    /// @notice Get ID of registered token.
    /// @return ID of token as uint256
    function tokenId(addr) -> id {
      id := sload(mappingKey(Storage.Token, addr))
    }

    /// @notice Register a new token with a sequentially assigned ID.
    function indexToken(addr, id) {
      sstore(mappingKey(Storage.Token, addr), id)
      sstore(Storage.NumTokens, add(id, 1))
      log3(0, 0,
          topic"event TokenIndexed(address indexed token, uint256 indexed id)",
          addr,
          id)
    }

    /// @notice Return ID of token, assigning a new one if necessary.
    /// @return ID of token as uint256
    function commitToken(addr) -> id {
      id := tokenId(addr)

      if and(neq(addr, 0), iszero(id)) {
        id := numTokens()

        // here we enforce the token ID maximum, keeping token ID's under 4 bytes in length
        require(lt(id, MAX_TOKEN_ID), error"token-id-max")
        indexToken(addr, id)
      }
    }
  }
}
