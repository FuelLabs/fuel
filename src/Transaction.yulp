import "./Inputs.yulp"
import "./Outputs.yulp"
import "./Witness.yulp"
import "./Metadata.yulp"
import "./EIP712.yulp"

/// @title Transaction object
object "Transaction" is "EIP712", "Metadata", "Witness", "Inputs", "Outputs" {
  code {
    // Minimum transaction size in bytes
    const TRANSACTION_SIZE_MIN := 44
    // Maximum transaction size in bytes
    const TRANSACTION_SIZE_MAX := 896
    // Maximum number of inputs per transaction
    const INPUTS_MAX := 8
    // Maximum number of outputs per transaction
    const OUTPUTS_MAX := 8
    // Empty leaf hash default value
    const EMPTY_LEAF_HASH := 0

    /// @notice Merkle proof to specific input or output of a transaction in the rollup chain.
    mstruct TransactionProof (
      // Address of block producer
      blockProducer: address,           // <--- block header begins here
      // Hash of previous block
      previousBlockHash: bytes32,
      // Rollup block height
      blockHeight: uint256,
      // Ethereum block number
      blockNumber: uint256,
      // Maximum registered token ID used through this rollup block
      numTokens: uint256,
      // Maximum registered address used through this rollup block
      numAddresses: uint256,
      roots.length: uint16,
      // List of transaction roots
      roots: [bytes32],                 // <--- block header ends here

      // Producer of root
      rootProducer: address,            // <-- root header begins here
      // Root value
      merkleTreeRoot: bytes32,
      // Hash of transactions committed to in root
      commitmentHash: bytes32,
      // Number of bytes for transactions committed to in root
      rootLength: uint256,
      // Token ID of fees
      feeToken: uint256,
      // Claimed feerate for all transactions in root
      fee: uint256,
      // Transaction Type
      transactionType: uint256,
      // Signature Hash
      signatureHash: bytes32, // <--- root header ends here

      // Index of root in list of roots
      rootIndex: uint16,

      merkleProof.length: uint16,
      // Merkle proof: neighbouring node values
      merkleProof: [bytes32],

      // Index of input or output of transaction
      inputOutputIndex: uint8,
      // Index of transaction in list of transactions in root
      transactionIndex: uint16,

      transaction.length: uint16,
      // Actual transaction leaf
      transaction: [bytes1],            // <--- transaction data begins inside here
      data.length: uint8,
      // Implicit list of unique identifiers being spent (UTXO ID, deposit ID)
      data: [bytes32],
      // Implicit token ID to pay fees in
      signatureFeeToken: uint256,
      // Implicit fee rate
      signatureFee: uint256,            // <--- transaction data ends here

      // Token address, used for invalid sum proofs
      tokenAddress: address,
      // Return owner, used for HTLCs with expired timelock
      returnOwner: address
    )

    /// @notice Leaf of transaction Merkle tree.
    mstruct TransactionLeaf (
      // Length of leaf in bytes
      length: uint16,
      metadata.length: uint8,
      // List of metadata, one per input
      metadata: [bytes8],
      witnesses.length: uint16,
      // List of witnesses
      witnesses: [bytes1],
      inputs.length: uint16,            // <--- transaction data begins here
      // List of inputs
      inputs: [bytes1],
      outputs.length: uint16,
      // List of outputs
      outputs: [bytes1]
    )

    /// @notice Helper function to load a UTXO into memory for later use.
    function TransactionProof.UTXO.assign(proof, pos) {
      let output := selectOutput(proof)

      // Return-type outputs are unspendable
      require(neq(Output.type(output), OutputType.Return),
        error"utxo-return")

      // Owner must match
      require(ownerEquates(output, TransactionProof.tokenAddress(proof)),
        error"owner-equates")

      // For HTLC UTXOs, return owner must match
      if eq(Output.type(output), OutputType.HTLC) {
        require(returnOwnerEquals(output, TransactionProof.returnOwner(proof)),
          error"owner-return-equates")
      }

      // Save the UTXO to memory
      mstore(
        pos,
        transactionId(proof),
        TransactionProof.inputOutputIndex(proof),
        Output.type(output),
        TransactionProof.tokenAddress(proof),
        outputAmount(output),
        Output.token.slice(output),
        0, // digest
        0, // expiry
        0  // return witness
      )

      // If the UTXO is an HTLC type, make sure to save the extra required fields
      if eq(Output.type(output), OutputType.HTLC) {
        mstore(add(pos, 192), OutputHTLC.digest(output))
        mstore(add(pos, 224), OutputHTLC.expiry(output))
        mstore(add(pos, 256), TransactionProof.returnOwner(proof))
      }
    }

    /*
    mstruct TransactionLeaf (
      // Length of leaf in bytes
      length: uint16,
      metadata.length: uint8,
      // List of metadata, one per input
      metadata: [bytes8],
      witnesses.length: uint16,
      // List of witnesses
      witnesses: [bytes1],
      inputs.length: uint16,            // <--- transaction data begins here
      // List of inputs
      inputs: [bytes1],
      outputs.length: uint16,
      // List of outputs
      outputs: [bytes1]
    )
    */

    function shlb(shiftInBytes, value) -> result {
      result := shl(mul(shiftInBytes, 8), value)
    }

    function shrb(shiftInBytes, value) -> result {
      result := shr(mul(shiftInBytes, 8), value)
    }

    // one ether and precision
    const ONE_ETHER := 1000000000000000
    const PRECISION_ROOM := 1000

    // This is a simple packed transfer used for Compressed roots
    mstruct PackedTransfer (
      metadata: bytes8,
      from: uint32,
      to: uint32,
      transferAmount: uint32,
      changeAmount: uint32
    )

    // First two bytes x, second two bytes y (x * ONE_ETHER) / (y * ONE_ETHER) * ONE_ETHER
    function factorInMantissa(transferAmount) -> manitssaAmount {
      manitssaAmount := mul(transferAmount, div(ONE_ETHER, PRECISION_ROOM))
    }

    // Write a TransferOutput to memory
    function TransferOutput.assign(position, token, owner, amount) {
      // [1] store Transfer output Type 0
      mstore(position, shlb(31, OutputType.Transfer))

      // [1] Token length
      mstore(add(position, 1), shlb(31, 4))

      // [4] Token specifier for Output 0
      mstore(add(position, 2), shlb(28, token))

      // [1] Amount shift 0 shift for now
      mstore(add(position, 6), 0)

      // [1] Amount length, factor in mantissa
      mstore(add(position, 7), shlb(31, 32))

      // [32] Amount, extract amount and factor in mantissa
      mstore(add(position, 8), factorInMantissa(
        amount
      ))

      // [1] output 0 owner to length
      mstore(add(position, 40), shlb(31, 4))

      // [4] output 0 packed transfer to
      mstore(add(position, 41), shlb(28, owner))
    }

    // This will verify the suppied returnOwner is correct
    function TransactionProof.verify(proof) {
      // grab the original position of the transaciton proof
      let position := TransactionProof.transaction.position(proof)

      // if it's a compressed PackedTransfer
      if eq(TransactionProof.transactionType(proof), 1) {

        // verify the address id is correct
        require(eq(addressId(TransactionProof.returnOwner(proof)), PackedTransfer.from(position)),
          error"from-owner-address")
      }
    }

    /// @notice expand transaction from it's compressed form into a fully expanded form
    /// @dev this will directly overrite data in memory, so it needs to be done at the right time (i.e. after merkle proofing)
    function TransactionProof.expand(proof) {
      // grab the original position of the transaciton proof
      let position := TransactionProof.transaction.position(proof)

      // Determine a new place for the packed transaction data
      let _transactionPosition := add(_calldata, calldatasize())

      // if it's a compressed PackedTransfer
      if eq(TransactionProof.transactionType(proof), 1) {

        // ensure the proof has enough room for expansion of data..
        require(gt(TransactionProof.transaction.length(proof), 250), error"not-enough-expansion-room")

        // copy the 24 byte transaction over to a fresh piece of memory
        mstore(_transactionPosition, mload(position))

        // [2] store length
        mstore(position, shlb(30, 100))

        // [1] store metadata length
        mstore(add(position, 2), shlb(31, 1))

        // [8] store metadata
        mstore(add(position, 3), shlb(24, PackedTransfer.metadata(_transactionPosition)))

        // [2] witnesses length
        mstore(add(position, 11), shlb(30, 25))

        // [1] store AggregateSignature data
        mstore(add(position, 13), shlb(31, WitnessType.AggregateSignature))

        // [4] store AggregateAddress from addressIndex
        mstore(add(position, 14), shlb(28, PackedTransfer.from(_transactionPosition)))

        // [20] store AggregateAddress address
        mstore(add(position, 18), shlb(12, TransactionProof.returnOwner(proof)))

        // [2] store inputs lengths
        mstore(add(position, 38), shlb(30, 2))

        // [2] store InputTransfer type 0 witnessIndex 0
        mstore(add(position, 40), shlb(30, 0x0000))

        // [2] store outputs length
        mstore(add(position, 42), shlb(30, add(45, 45)))

        // [45] Write the output to memory
        TransferOutput.assign(add(position, 44),
          TransactionProof.feeToken(proof),
          PackedTransfer.to(_transactionPosition),
          PackedTransfer.transferAmount(_transactionPosition))

        // [45] Write the change amount to memory
        TransferOutput.assign(add(position, 89),
          TransactionProof.feeToken(proof),
          PackedTransfer.from(_transactionPosition),
          PackedTransfer.changeAmount(_transactionPosition))
      }
    }

    /// @notice Hash a UTXO.
    /// @return The UTXO's hash as a bytes32
    function TransactionProof.UTXO.keccak256(proof) -> hash {
      // Assign UTXO to memory
      TransactionProof.UTXO.assign(proof, 0)

      // Hash UTXO to get UTXO ID
      hash := UTXO.keccak256(0)
    }

    /// @notice Find the position of the start of the block substructure.
    /// @return Position of block substructure as uint256
    function TransactionProof.block(proof) -> pos {
      pos := TransactionProof.blockProducer.position(proof)
    }

    /// @notice Find the position of start of the root substructure.
    /// @return Position of root substructure as uint256
    function TransactionProof.root(proof) -> pos {
      pos := TransactionProof.rootProducer.position(proof)
    }

    ////////////////////////////////////////////////////////////////////////////
    // ABI Encoded Structures (Non-Tight Packed/Rolled)
    ////////////////////////////////////////////////////////////////////////////

    /// @notice Calculate the fee of a root. This is feerate x length of transactions in bytes.
    /// @return Fee for root as uint256
    function rootFee(proof, token) -> sum {
      if eq(TransactionProof.feeToken(proof), token) {
        sum := mul(TransactionProof.transaction.length(proof), TransactionProof.fee(proof))
      }
    }

    /// @notice Get transaction ID from proof.
    /// @return Transaction ID as bytes32
    function transactionId(proof) -> hash {
      let leaf := TransactionProof.transaction.position(proof)
      // Transaction IDs are the EIP-712 hash of the non-witness transaction data.
      // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md
      let start := TransactionLeaf.inputs.length.position(leaf)
      let end := TransactionProof.signatureFee.offset(proof)
      hash := eip712(keccak256(start, sub(end, start)))
    }

    // @notice Detects if normal leaf or compressed leaf, calculates hash accoridingly
    function calculateTransactionLeafHash(proof) -> hash {
      // get the transaction type from the proof
      let transactionType := RootHeader.transactionType(TransactionProof.rootProducer.position(proof))

      // if it's a normal tx, the entire leaf is hashed simplistically
      if lte(transactionType, 0) {
        hash := TransactionProof.transaction.keccak256(proof)
      }

      // if it's a compressed transaction, the leaf is only the first 24 bytes
      if eq(transactionType, 1) {
        let start := TransactionProof.transaction.position(proof)
        hash := keccak256(start, 24)
      }
    }

    /// @notice Find the position of the witness at a given index.
    /// @return Position of witness as uint256
    function TransactionProof.witness(proof, index) -> pos {
      let leaf := TransactionProof.transaction.position(proof)
      pos := TransactionLeaf.witnesses.position(leaf)

      // Iterate through list of witnesses until index is reached
      for {} gt(index, 0) {} {
        pos := add(pos, witnessSize(pos))
        index := sub(index, 1)
      }

      require(lt(pos, TransactionLeaf.witnesses.offset(leaf)), error"witness-position-overflow")
    }

    /// @notice Find the position of the witness with proof-specified index.
    /// @return Position of witness as uint256
    function TransactionProof.input.witness(proof) -> pos {
      let index := Input.witnessReference(selectInput(proof))
      pos := TransactionProof.witness(proof, index)
    }

    /// @notice Find the position of the input with proof-specified index.
    /// @return Position of input as uint256
    function selectInput(proof) -> pos {
      let leaf := TransactionProof.transaction.position(proof)
      let index := TransactionProof.inputOutputIndex(proof)
      pos := TransactionLeaf.inputs.position(leaf)

      require(lt(index, INPUTS_MAX), error"input-index-overflow")

      for {} gt(index, 0) {} {
        pos := add(pos, inputSize(pos))
        index := sub(index, 1)
      }

      require(lt(pos, TransactionLeaf.inputs.offset(leaf)), error"input-position-overflow")
    }

    /// @notice Extract metadata of output referenced by input from proof.
    /// @return Metadata as bytes8
    function inputReferencedMetadata(proof) -> id {
      let leaf := TransactionProof.transaction.position(proof)
      let index := TransactionProof.inputOutputIndex(proof)
      id := TransactionLeaf.metadata(leaf, index)
    }

    /// @notice Find the position of the output with proof-specified index.
    /// @return Position of output as uint256
    function selectOutput(proof) -> pos {
      let leaf := TransactionProof.transaction.position(proof)
      let index := TransactionProof.inputOutputIndex(proof)
      pos := TransactionLeaf.outputs.position(leaf)

      require(lt(index, OUTPUTS_MAX), error"output-index-overflow")

      for {} gt(index, 0) {} {
        pos := add(pos, outputSize(pos))
        index := sub(index, 1)
      }

      require(lt(pos, TransactionLeaf.outputs.offset(leaf)), error"output-position-overflow")
    }

    /// @notice Check if HTLC output has timed out.
    /// @return If the output has timed out as bool
    function outputExpired(input, proof) -> result {
      let output := selectOutput(input)
      let blockNumber := TransactionProof.blockNumber(proof)
      result := gt(blockNumber, OutputHTLC.expiry(output))
    }

    /// @notice Get total length of witneses, in bytes.
    /// @return Length of witnesses as uint256
    function witnessesLength(leaf) -> len {
      let pos := TransactionLeaf.witnesses.position(leaf)
      let end := TransactionLeaf.witnesses.offset(leaf)

      // Iterate over witness lengths and accumulate
      for {} lt(pos, end) {} {
        pos := add(pos, witnessSize(pos))
        len := add(len, 1)
      }
    }

    /// @notice Get total length of inputs, in bytes.
    /// @return Length of inputs as uint256
    function inputsLength(leaf) -> len {
      let pos := TransactionLeaf.inputs.position(leaf)
      let end := TransactionLeaf.inputs.offset(leaf)

      // Iterate over input lengths and accumulate
      for {} lt(pos, end) {} {
        pos := add(pos, inputSize(pos))
        len := add(len, 1)
      }
    }

    /// @notice Get total length of outputs, in bytes.
    /// @return Length of outputs as uint256
    function TransactionProof.outputs.length(proof) -> len {
      let leaf := TransactionProof.transaction.position(proof)
      let pos := TransactionLeaf.outputs.position(leaf)
      let end := TransactionLeaf.outputs.offset(leaf)

      // Iterate over output lengths and accumulate
      for {} lt(pos, end) {} {
        pos := add(pos, outputSize(pos))
        len := add(len, 1)
      }
    }

    /// @notice Extract input metadata from proof.
    /// @return Input metadata as bytes8.
    function inputMetadata(proof) -> id {
      mstore(4, TransactionProof.inputOutputIndex(proof))
      mstore(2, TransactionProof.transactionIndex(proof))
      mstore(1, TransactionProof.rootIndex(proof))
      mstore(0, TransactionProof.blockHeight(proof))
      id := mslice(28, 8)
    }

    /// @notice Extract output metadata from proof.
    /// @return Output metadata as bytes8.
    function outputMetadata(proof) -> id {
      mstore(4, TransactionProof.inputOutputIndex(proof))
      mstore(2, TransactionProof.transactionIndex(proof))
      mstore(1, TransactionProof.rootIndex(proof))
      mstore(0, TransactionProof.blockHeight(proof))
      id := mslice(28, 8)
    }

    /// @notice Find the position of the metadata with given index.
    /// @return Position of metadata as uint256
    function selectMetadata(proof, index) -> pos {
      let leaf := TransactionProof.transaction.position(proof)
      pos := TransactionLeaf.metadata.position(leaf)

      require(lt(index, INPUTS_MAX), error"input-index-overflow")

      for {} gt(index, 0) {} {
        pos := add(pos, METADATA_SIZE)
        index := sub(index, 1)
      }

      require(lt(pos, TransactionLeaf.metadata.offset(leaf)), error"input-position-overflow")
    }

    // number of transactions per aggregate chunk
    const aggregateChunkSize := 32

    // check if an aggregate signture root is valid, if not agg sig root, throw
    function isAggregateSignatureRootValid(proof) -> isValid {
      let blockHash := BlockHeader.keccak256(TransactionProof.blockProducer.position(proof))
      let rootIndex := TransactionProof.rootIndex(proof)
      let transactionIndex := TransactionProof.transactionIndex(proof)
      let chunkIndex := mod(transactionIndex, 32)
      isValid := true
    }

    /// @notice Recover witness address from proof.
    /// @return Recovered address as address. 0 on fail.
    function recoverFromWitness(witness, proof) -> addr {
      switch Signature.type(witness)

      case WitnessType.Signature {
        addr := ecrecover(transactionId(proof), witness)
      }

      case WitnessType.Caller {
        addr := Caller.owner(witness)

        if neq(witnessAt(addr, Caller.blockNumber(witness)), transactionId(proof)) {
          addr := 0
        }
      }

      case WitnessType.Producer {
        addr := TransactionProof.blockProducer(proof)

        if neq(Producer.hash(witness), transactionId(proof)) {
          addr := 0
        }
      }

      case WitnessType.AggregateSignature {
        addr := AggregateSignature.owner(witness)

        // this must call the fraudProver contract with the tx id,
        let id := addressId(addr) // sload(mappingKey(Storage.Address, addr))

        // revert if id and provided address dont match
        require(eq(id, AggregateSignature.addressIndex(witness)), error"invalid-aggregate-signature-address")

        // check is the bls root valid, return a zero, thus causing invalid witness to work...
        if iszero(isAggregateSignatureRootValid(proof)) {
          addr := 0
        }
      }

      default { require(0, error"witness-type") }
    }

    /// @notice ecrecover witness with proof-specified index.
    /// @return Recovered address as address
    function TransactionProof.input.recoverWitness(proof) -> addr {
      let witness := TransactionProof.input.witness(proof)
      addr := recoverFromWitness(witness, proof)
    }
  }
}
