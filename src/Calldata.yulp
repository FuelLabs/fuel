/// @title Calldata helper methods
object "Calldata" {
  code {
    // Offset in memory at which to start the call data copy
    const _calldata := 1024

    /// @notice Copy all calldata to memory.
    function calldata.copy() {
      calldatacopy(_calldata, 0, calldatasize())
    }

    /// @notice Get function signature.
    /// @return Function signature as bytes4
    function calldata.signature() -> sig {
      sig := mslice(_calldata, 4)
    }

    /// @notice Get one word.
    /// @return Word as bytes32
    function calldata.word(index) -> word {
      word := mload(add(add(_calldata, 4), mul(index, 32)))
    }

    function abi.offset(offset) -> position {
      position := add(offset, add(36, _calldata))
    }

    function abi.length(offset) -> length {
      length := mload(add(offset, add(4, _calldata)))
    }

    function return.word(word) {
      mstore(0, word)
      return(0, 32)
    }

    function calldata.offset() -> offset {
      offset := add(_calldata, calldatasize())
    }
  }
}
