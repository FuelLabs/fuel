import "./Transaction.yulp"
import "./Deposit.yulp"

object "VerifyData" is "Deposit", "Transaction" {
  code {
    function verifyData(transaction, inputs) {
      let pos := TransactionLeaf.inputs.position(TransactionProof.transaction.position(transaction))
      let index := 0

      for {} lt(pos, TransactionLeaf.inputs.offset(TransactionProof.transaction.position(transaction))) {} {
        switch Input.type(pos)

        case InputTypes.Transfer {
          require(eq(TransactionProof.data(transaction, index), UTXO.keccak256(inputs)),
            error"utxo-proof")

          inputs := add(inputs, UTXO.size(inputs))
        }

        case InputTypes.Deposit {
          require(eq(TransactionProof.data(transaction, index), Deposit.keccak256(inputs)),
            error"deposit-proof")

          inputs := add(inputs, Deposit.size(inputs))
        }

        case InputTypes.HTLC {
          require(eq(TransactionProof.data(transaction, index), UTXO.keccak256(inputs)),
            error"utxo-proof")

          inputs := add(inputs, UTXO.size(inputs))
        }

        case InputTypes.Root {
          require(eq(TransactionProof.data(transaction, index), RootHeader.keccak256(inputs)),
            error"utxo-proof")

          inputs := add(inputs, TransactionProof.size(inputs))
        }

        default { require(0, error"input-data-length") }

        pos := add(pos, inputSize(pos))
        index := add(index, 1)
      }
    }
  }
}
