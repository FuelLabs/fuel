import "./Storage.yulp"
import "./verifiers/TransactionProof.yulp"
import "./Transaction.yulp"
import "./Utils.yulp"
import "./verifiers/BlockHeader.yulp"

/// @title Withdrawal object
object "Withdraw" is "Storage", "BlockHeader", "TransactionProof", "Transaction", "Utils" {
  code {
    /// @notice Metadata of a withdrawal transcation in the rollup. Points to an entry in a block.
    mstruct WithdrawalMetadata(
      // Index of root in list of roots
      rootIndex: uint256,
      // Hash of transaction leaf in tree rooted at rootIndex
      transactionLeafHash: bytes32,
      // Index of output in list of outputs of transaction in the transaction leaf
      outputIndex: uint256
    )

    /// @notice Check if the withdrawal has already need processed.
    /// @return If the withdrawal has already been processed as bool
    function isWithdrawalProcessed(blockHeight, withdrawalId) -> result {
      result := sload(mappingKey2(Storage.Withdrawals, blockHeight, withdrawalId))
    }

    /// @notice Do a withdrawal.
    function withdraw(transactionProof) {
      // Verify transaction proof
      verifyTransactionProof(transactionProof, AssertFinalized.Finalized)

      // Select the output from the proof
      let output := selectOutput(transactionProof)

      // Get token address from the proof, and owner
      let tokenAddress := TransactionProof.tokenAddress(transactionProof)
      let owner := caller()

      // Owner must match
      require(ownerEquates(output, owner), error"output-owner")

      // Token ID must match
      require(eq(Output.token.slice(output), tokenId(tokenAddress)),
        error"token-id")

      // Output type must be Withdraw
      require(eq(Output.type(output), OutputType.Withdraw),
          error"output-type")

      // Get transaction details
      let transactionLeafHash := TransactionProof.transaction.keccak256(transactionProof)
      let outputIndex := TransactionProof.output(transactionProof)
      let blockHeight := TransactionProof.blockHeight(transactionProof)

      // Construct withdrawal ID
      mstore(0, TransactionProof.rootIndex(transactionProof), transactionLeafHash, outputIndex)
      let withdrawalId := WithdrawalMetadata.keccak256(0)

      // This withdrawal must not have been processed yet
      require(eq(isWithdrawalProcessed(blockHeight, withdrawalId), false),
        error"withdrawal-occured")

      // Transfer amount out
      transfer(outputAmount(output), tokenAddress, owner)

      // Set withdrawal as processed
      sstore(mappingKey2(Storage.Withdrawals, blockHeight, withdrawalId), true)

      // Construct log for withdrawal
      mstore(
        0,
        tokenAddress,
        outputAmount(output),
        TransactionProof.rootIndex(transactionProof),
        outputIndex,
        TransactionProof.transactionIndex(transactionProof)
      )
      log4(
        0,
        mul32(5),
        topic"event WithdrawalMade(
          address indexed owner,
          address tokenAddress,
          uint256 amount,
          uint32 indexed blockHeight,
          uint32 rootIndex,
          bytes32 indexed transactionLeafHash,
          uint8 outputIndex,
          uint32 transactionIndex)",
        owner,
        blockHeight,
        transactionLeafHash
      )
    }

    /// @notice Withdraw a block producer bond from a finalizable block.
    function bondWithdraw(blockHeader) {
      // Setup block producer withdrawal ID (i.e. zero)
      let withdrawalId := 0

      // Setup block height
      let blockHeight := BlockHeader.height(blockHeader)

      // Verify block header is finalized
      verifyHeader(blockHeader, 0, 0, AssertFinalized.Finalized)

      // Caller must be block producer
      require(eq(BlockHeader.producer(blockHeader), caller()),
          error"caller-producer")

      // Block bond withdrawal must not have been processed yet
      require(eq(isWithdrawalProcessed(blockHeight, withdrawalId), false),
          error"already-withdrawn")

      // Get bond amount
      Constructor.copy(0)
      let bondSize := Constructor.bondSize(0)

      // Transfer bond back to block producer
      transfer(bondSize, ETHER_TOKEN_ADDRESS, caller())

      // Set withdrawal as processed
      sstore(mappingKey2(Storage.Withdrawals, blockHeight, withdrawalId), true)

      // Log withdrawal data and topics
      mstore(0, ETHER_TOKEN_ADDRESS, bondSize, 0, 0, 0)
      log4(
        0,
        mul32(5),
        topic"event WithdrawalMade(
          address indexed owner,
          address token,
          uint256 amount,
          uint32 indexed blockHeight,
          uint32 rootIndex,
          bytes32 indexed transactionLeafHash,
          uint8 outputIndex,
          uint32 transactionIndex)",
        caller(),
        blockHeight,
        EMPTY_LEAF_HASH
      )
    }
  }
}
